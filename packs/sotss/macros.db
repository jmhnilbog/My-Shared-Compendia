{"name":"Beastmanhandle!","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/commodities/biological/foot-amphibian-green.webp","actorIds":[],"_id":"1nxg6eJWSQnmXnm1"}
{"_id":"42KNVPIqpQXu6M6C","name":"Plunges The Cavern Into Darkness","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"5JnRFf1xwtZh2tmU","name":"Timed Global Chatter","permission":{"default":0,"ANHn7Sw4w0uRlS0W":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":400000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"game.npcChatter.randomGlobalChatterEvery(5000)","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"63uOhwAyekZ1jkkt","name":"Sissirroll","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"[[/roll 1d20]]","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"7bO2SMBqCarLXZUZ","name":"Huh","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"/what look what","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"80fIam7RhSPzAxcU","name":"Fort Save","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{},"scope":"global","command":"const actor = game.dcc.getMacroActor(); \n\nactor && actor.rollSavingThrow(\"frt\");","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/shield.svg","actorIds":[]}
{"name":"spear","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/weapons/polearms/spear-flared-worn-grey.webp","actorIds":[],"_id":"9kiPcPwfWPSegPIf"}
{"name":"New Macro","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"AWOflXVglDQhHMH5"}
{"_id":"BTccqAGQwg2BSdH4","name":"Chatter!","permission":{"default":0,"ANHn7Sw4w0uRlS0W":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":500000,"flags":{},"scope":"global","command":"const chatter = game.npmChatter;\nchatter.selectedChatter()","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"roll-skill","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":2000000,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and the LMRTFY module, v0.7+\r\n * This will request a skill check for the currently selected player using LMRTFY roll request dialog\r\n * Takes the skill as its first argument, or if not set, requests all\r\n * Example: /roll-skill \"prc\"\r\n */\r\n\r\nconst skill = args[0] || Object.keys(CONFIG.DND5E.skills);\r\nif (!actor) return;\r\nLMRTFYRoller.requestSkillChecks(actor, skill);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"BeI8UlmnDcl95ZiP"}
{"name":"move-token","permission":{"FRJk2q4bH9IdLZDf":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will move the selected token to the designated position\r\n * Takes X and Y as arguments for the position (in pixels)\r\n * A third, optional, argument, if set to true, will disable the movement animation\r\n * Example: /move-token 1000 1500 false\r\n */\r\n\r\nconst x = args[0];\r\nconst y = args[1];\r\nconst noAnimate = args[2];\r\n\r\nif (!token) return;\r\nif (noAnimate) token._noAnimate = true;\r\nawait token.update({x, y})\r\ntoken._noAnimate = false;","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"DPbDQM78fZa0EKLD"}
{"name":"Polygon Drawing To Walls","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":800000,"flags":{},"scope":"global","command":"/**\n * Converts selected polygon drawing to a wall\n * @Author: cole#9640\n */\n\nlet drawings = canvas.drawings.controlled;\n\ndrawings = drawings.filter(drawing =>  {\n    if (!drawing.isPolygon) {\n        ui.notifications.warn(`Drawing \"${drawing.data._id}\" is not a polygon, skipping`);\n        return false;\n    }\n    return true;\n});\n\nif (drawings.length) {\n    const newWalls = drawings.flatMap((drawing) => {\n        const { x, y, width, height } = drawing.data;\n        const xCenterOffset = width/2;\n        const yCenterOffset = height/2;\n        \n        const θ = toRadians(drawing.data.rotation);\n        const cosθ = Math.cos(θ);\n        const sinθ = Math.sin(θ);\n        \n        const points = drawing.data.points.map((point) => {\n            const offsetX = point[0] - xCenterOffset;\n            const offsetY = point[1] - yCenterOffset;\n            const rotatedX = (offsetX * cosθ - offsetY * sinθ);\n            const rotatedY = (offsetY * cosθ + offsetX * sinθ);\n            return [rotatedX + x + xCenterOffset, rotatedY + y + yCenterOffset];\n        });\n        \n        return points.slice(0, points.length - 1)\n            .map((point, i) => {\n                return { c: point.concat(points[i + 1]) };\n            });\n    });\n    \n    canvas.scene.createEmbeddedEntity(\"Wall\", newWalls);\n    canvas.walls.activate();\n} else {\n    ui.notifications.error(\"No polygon drawings selected!\");\n}\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"FwSZoAzToRz6iSOB"}
{"name":"toggle-playlist-sound","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":2200000,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace and Playlist QoL\r\n * This will toggle the playing state of a sound in your playlists\r\n * Takes the playlist name as first argument, and the sound name as second argument \r\n * Example: /toggle-playlist-sound \"SFX\" \"Sword Clash\"\r\n */\r\n\r\nFurnacePlaylistQoL.PlaySound(args[0], args[1]);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"IAhIugeexesHHIMg"}
{"name":"current-time","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1700000,"flags":{},"scope":"global","command":"// Returns the current time in format \"HH:MM\" (24 hour format)\r\nconst now = new Date();\r\nreturn `${now.getHours()}:${now.getMinutes()}`;","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"LXpy5YLpqRc01hAY"}
{"name":"New Macro","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"LrBJ8oMnNGJ0W3He"}
{"name":"Change Token Vision","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1600000,"flags":{},"scope":"global","command":"// Open a dialog for quickly changing token vision parameters of the controlled tokens.\r\n// This macro was written by @Sky#9453\r\n// https://github.com/Sky-Captain-13/foundry\r\n\r\nif (canvas.tokens.controlled.length === 0)\r\n  return ui.notifications.error(\"Please select a token first\");\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"LuZfwdGCWW2hFz1E"}
{"_id":"MKsUIueZgEnbIo5t","name":"2nd Vine Horror Tendril","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m2\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/commodities/biological/tentacle-thorned-green.webp","actorIds":[]}
{"name":"Change Disposition","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":2500000,"flags":{},"scope":"global","command":"let applyChanges = false;\nnew Dialog({\n  title: `Token Disposition Changer`,\n  content: `\n    <form>\n      <div class=\"form-group\">\n        <label>Disposition Type:</label>\n        <select id=\"dispo-type\" name=\"dispo-type\">\n          <option value=\"nochange\">No Change</option>\n          <option value=\"hostile\">Hostile</option>\n          <option value=\"neutral\">Neutral</option>\n          <option value=\"friendly\">Friendly</option>\n        </select>\n      </div>\n    </form>\n    `,\n  buttons: {\n    yes: {\n      icon: \"<i class='fas fa-check'></i>\",\n      label: `Apply Changes`,\n      callback: () => applyChanges = true\n    },\n    no: {\n      icon: \"<i class='fas fa-times'></i>\",\n      label: `Cancel Changes`\n    },\n  },\n  default: \"yes\",\n  close: html => {\n    if (applyChanges) {\n      for ( let token of canvas.tokens.controlled ) {\n        let dispoType = html.find('[name=\"dispo-type\"]')[0].value || \"none\";\n        switch (dispoType) {\n          case \"hostile\":\n            token.update({\"disposition\": -1});\n            break;\n          case \"friendly\":\n            token.update({\"disposition\": 1});\n            break;\n          case \"neutral\":\n            token.update({\"disposition\": 0});\n            break;\n          case \"nochange\":\n          default:\n        }\n      }\n    }\n  }\n}).render(true);\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"OEiw8TVBt6NAAWuh"}
{"name":"Token HP","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":2300000,"flags":{},"scope":"global","command":"/**\n * Roll/Reroll selected token HP\n * Author: Tielc#7191\n */\n\nconst tokens = canvas.tokens.controlled;\nlet choice = 0;\n\nif (tokens.length > 0){\n\ttokens.forEach(rollHP);\n} else {\n\tprintMessage(\"No Tokens were selected\");\n}\n\nfunction rollHP(token, index){\n\tlet actor = token.actor;\n\tlet formula = actor.data.data.attributes.hp.formula;\n\t\t\n\tif (actor.data.type != \"npc\" || !formula) return;\n\t\n\tlet hp = new Roll(formula).roll().total;\n\t\n\tactor.data.data.attributes.hp.value = hp;\n\tactor.data.data.attributes.hp.max = hp;\n\t\n\tprintMessage('<h2>' + actor.data.name + '</h2><strong>HP:</strong> ' + actor.data.data.attributes.hp.value + '/' + actor.data.data.attributes.hp.max + '<span style=\"float:right\"><em>(' + token.data._id + ')</em></span>');\n}\n\nfunction printMessage(message){\n\tlet chatData = {\n\t\tuser : game.user._id,\n\t\tcontent : message,\n\t\tblind: true,\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\n\t};\n\n\tChatMessage.create(chatData,{});\t\n}\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"OHTOsGPznXreAbMJ"}
{"_id":"Q2hvuG6Qgo86gDgD","name":"Axe Attack!","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/weapons/axes/axe-double-black.webp","actorIds":[]}
{"name":"Folder To Rollable Table","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1100000,"flags":{},"scope":"global","command":"// Take the entries of a folder and turn it into a rollable table.\n// NOTE: you must click the \"Normalize Result Weights\" button (scale icon) after import.\n// Author: @Atropos#3814\n\n// name of folder whos entities you wish to push into a rollable table.\nconst folder = game.folders.getName(\"Herbalism & Alchemy\");\n// name of table you will be overwriting\nconst table = game.tables.getName(\"Common Ingredients\");\n// change this to match the entity type you are importing.\n// Actor, Item, Scene, JournalEntry, Macro, RollTable, Playlist\nconst entityType = \"Item\"\n\nconst items = folder.entities;\nconst results = folder.entities.map(i => {\n  return {\n    text: i.data.name,\n    type: 1,\n    collection: \"Item\",\n    resultId: i.data._id,\n    img: i.data.img,\n    weight: 1,\n    range: [1, 1],\n    drawn: false\n  }\n});\nawait table.createEmbeddedEntity(\"TableResult\", results);\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"QawrwH2OSHC2yO9H"}
{"_id":"SVyXX6bhRllStS1x","name":"Burst Open!","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"It bursts open, spilling mucosal seeds from within!","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/biohazard.svg","actorIds":[]}
{"name":"Roll Ammunition Die","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1200000,"flags":{},"scope":"global","command":"/*\nAuthor: stan#1549 (github.com/janssen-io)\n\nDescription:\nRoll cascading dice instead of keeping track of ammunition.\nExample:\n  When you shoot ammunition, roll a d12. On a 1, it gets replaced with a d10.\n  All the way down to a d4, after which you have a single shot left.\n  On average this gives 12 + 10 + 8 + 6 + 4 + 1 = 41 shots (for a d12)\n  If you need more than 61 shots (d20), then equip a second piece of the same\n  ammunition and give it its own ammo die.\n*/\n\n(() => {\n  if (!token) {\n    ui.notifications.warn(\"No character selected!\");\n    return;\n  }\n\n  const dieMap = {\n    20: 12,\n    12: 10,\n    10: 8,\n    8: 6,\n    6: 4,\n    4: 1,\n    1: 0\n  }\n\n  function rollDie(html, ammo) {\n    const ammoId = html[0].querySelector('input:checked')?.value;\n    if (!ammoId) {\n      ui.notifications.error(\"No ammunition selected.\");\n      return;\n    }\n    const diceInputs = Array.from(html[0].querySelectorAll('input[type=number]'));\n    const dice = diceInputs.reduce((curr, input) => (curr[input.name] = input.value, curr), {});\n\n    const die = dice[ammoId];\n    const roll = new Roll(`1d${die}`);\n    roll.roll();\n    dice[ammoId] = roll.result == 1 ? (dieMap[die] || die - 1) : die;\n    token.actor.unsetFlag('world', 'ammunition-dice')\n      .then(entity => entity.setFlag('world', 'ammunition-dice', dice));\n    roll.toMessage({\n      flavor: `[Ammunition roll] ${token.name} fires a(n) ${ammo.find(a => a.id == ammoId).name}!`\n    });\n  }\n\n  function updateDice(html) {\n    const diceInputs = Array.from(html[0].querySelectorAll('input[type=number]'));\n    const dice = diceInputs.reduce((curr, input) => (curr[input.name] = input.value, curr), {});\n\n    token.actor.unsetFlag('world', 'ammunition-dice')\n      .then(entity => entity.setFlag('world', 'ammunition-dice', dice));\n  }\n\n  function createForm(ammo, dice) {\n    const options = ammo.map(item => `\n      <tr>\n        <td><input type=\"radio\" name=\"item\" value=\"${item.id}\" checked /></td>\n        <td>${item.name}</td>\n        <td>d<input type=\"number\" name=\"${item.id}\" value=\"${dice[item.id] || 12}\" min=\"1\" max=\"20\" required ${game.user.isGM ? '' : 'disabled'}/></td>\n      </td>\n      `);\n    return `<table><thead><tr><td></td><td>Ammunition</td><td>Die</td></tr></thead>${options.join('')}</table>`;\n  }\n\n  function createDialog(token) {\n    const dice = token.actor.getFlag('world', 'ammunition-dice') || {};\n    const ammunition = token.actor.items.filter(i => i.type == \"consumable\" && i.data.data.consumableType == \"ammo\");\n\n    if (ammunition.length === 0) {\n      ui.notifications.error(\"You have no ammunition.\");\n      return;\n    }\n\n    const form = createForm(ammunition, dice);\n\n    return new Dialog({\n      title: \"Roll ammunition die\",\n      content: form,\n      buttons: {\n        yes: { label: \"Roll\", callback: html => rollDie(html, ammunition) },\n        no: (game.user.isGM ? { label: \"Update\", callback: html => updateDice(html) } : { label: \"Cancel\" })\n      },\n      default: (game.user.isGM ? 'no' : 'yes')\n    }).render(true);\n  }\n\n  createDialog(token);\n\n})();\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"TnRUSUts6nSmy6kE"}
{"_id":"XvyEJZdycqYLvOfZ","name":"Specific Token Chatter","permission":{"default":0,"ANHn7Sw4w0uRlS0W":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":700000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"var token = game.scenes.filter(x => x.active)[0].data.tokens.filter(x => x.name == \"Human Thug C\")[0];\ngame.npcChatter.tokenChatter(token);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Blowgun","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"r1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"modules/dcc-core-book/assets/svg/game-icons-net/gunshot.svg","actorIds":[],"_id":"ZRaTROlx2BoXuc76"}
{"_id":"Zw0ip9Xz9KVTb4rA","name":"Selected Chatter","permission":{"default":0,"ANHn7Sw4w0uRlS0W":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100000,"flags":{},"scope":"global","command":"game.npcChatter.selectedChatter()","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"pan-camera","permission":{"FRJk2q4bH9IdLZDf":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"// Pan the canvas camera to a position X and Y, in pixels.\r\n// Can also set the zoom level using the third optional argument.\r\n// Example: /pan-camera 1500\r\n// Example: /pan-camera 2500 2000 0.3\r\n\r\ncanvas.pan({x: args[0], y: args[1], scale: args[2]})","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"bq9bcx0lxQoUk2Dq"}
{"name":"Hex Crawler Helper","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":900000,"flags":{},"scope":"global","command":"/*\nRequired Rollable Tables:\n*Wilderness Encounters*\n    coast\n    jungle1\n    jungle2\n    jungle3\n    mountains\n    rivers\n    ruins\n    swamp\n    wasteland\n\n*Other Tables*\n    weather\n    directions\n\n    cache\n    deadexplorers\n\nCache and Deadexplorers are not mandatory, but if you don't want them search the file for // CACHE LINES or // DEAD EXPLORER LINES and comment out the 2 lines below the comments\n\nExplanation of those tables:\nIf you have an encounter table that has the word cache in it, the cache table will be rolled automatically.\n    <br/><span id=\"cache\">The party finds a cache: </span>\nIf you have an encounter table that has DeadExplorers in it, the dead explorer table will be rolled automatically.\n    <br/><span id=\"DeadExplorers\">The party finds: </span> \n\n\nYou can have an automatic moving \"Actual Location\" Marker by creating a Token named \"Actual Location\" and placing it on your hex grid.\nThis will move if the players are \"Lost\". If the players are not lost it will not move.\n\n\n\n*/\n\n\n// Macro requires selecting a token to roll the survival check\n\nlet hexCrawl() => {\n    if (canvas.tokens.controlled.length === 0)\n        return ui.notifications.error(\"Please select the token of the Navigator!\");\n\n    const playerMarker = canvas.scene.data.tokens.find(a => a.name === 'Player Location');\n    const locationMarker = canvas.scene.data.tokens.find(a => a.name === 'Actual Location');\n\n    const gridSize = canvas.grid.size;\n    const vertical = gridSize * 0.866666;\n    const diagVertical = gridSize * 0.433333;\n    const diagHorizontal = gridSize * 0.75;\n\n    // The option values below are the names of your rollable tables for each hex type. If these get changed here you will need to change them in the Survival Check DC section too!\n\n    let pace = 'none';\n    new Dialog({\n        title: `Hex Crawl Helper`,\n        content: `\n        <form>\n            <div class=\"form-group\">\n                <label>Hex Type:</label>\n                <select id=\"hex-type\" name=\"hex-type\">\n                    <option value=\"coast\">Coast</option>\n                    <option value=\"jungle1\">Jungle: No Undead</option>\n                    <option value=\"jungle2\">Jungle: Lesser Undead</option>\n                    <option value=\"jungle3\">Jungle: Greater Undead</option>\n                    <option value=\"mountains\">Mountains</option>\n                    <option value=\"rivers\">River</option>\n                    <option value=\"ruins\">Ruins</option>\n                    <option value=\"swamp\">Swamp</option>\n                    <option value=\"wasteland\">Wasteland</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label>Travel Direction:</label>\n                <select id=\"travel-direction\" name=\"travel-direction\">\n                    <option value=\"North\">North</option>\n                    <option value=\"Northeast\">Northeast</option>\n                    <option value=\"Southeast\">Southeast</option>\n                    <option value=\"South\">South</option>\n                    <option value=\"Southwest\">Southwest</option>\n                    <option value=\"Northwest\">Northwest</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label>Travel Type:</label>\n                <select id=\"travel-type\" name=\"travel-type\">\n                    <option value=\"on-foot\">On Foot</option>\n                    <option value=\"canoe\">By Canoe</option>\n                </select>\n            </div>\n        </form>\n        `,\n        buttons: {\n            slow: {\n                icon: \"<i class='fas fa-user-ninja'></i>\",\n                label: `Slow Pace`,\n                callback: () => pace = 'slow'\n            },\n            average: {\n                icon: \"<i class='fas fa-hiking'></i>\",\n                label: `Average Pace`,\n                callback: () => pace = 'average'\n            },\n            fast: {\n                icon: \"<i class='fas fa-running'></i>\",\n                label: `Fast Pace`,\n                callback: () => pace = 'fast'\n            }\n        },\n        default: \"average\",\n        close: html => {\n            // set variables\n            let hexType = html.find('[name=\"hex-type\"]')[0].value;\n            let travelType = html.find('[name=\"travel-type\"]')[0].value;\n            let playerDirection = html.find('[name=\"travel-direction\"]')[0].value;\n            const weatherTable = game.tables.entities.find(t => t.name === \"weather\");\n            const directionTable = game.tables.entities.find(t => t.name === \"directions\");\n            const cacheTable = game.tables.entities.find(t => t.name === \"cache\");\n            const deadExplorerTable = game.tables.entities.find(t => t.name === \"deadexplorers\");\n            const encounterTable = game.tables.entities.find(t => t.name === hexType);\n            let weatherRoll = weatherTable.roll()[1].text;\n            let lostDirection = directionTable.roll()[1].text;\n            let msgContent = '<strong>Weather</strong> ' + weatherRoll + '<br/><br/>';\n            let navigator = Actors.instance.get(canvas.tokens.controlled[0].data.actorId);\n            let wis = navigator.data.data.abilities.wis.mod;\n            let survival = new Roll(`1d20`).roll().total + wis;\n            let slowPace = new Roll(`1d4`).roll().total;\n            let fastPace = new Roll(`1d2`).roll().total;\n            let hexesMoved = 1;\n            let encounter = '';\n            let hexText = 'hexes';\n\n            if (travelType === 'canoe') {\n                hexesMoved++;\n            }\n\n            // build pace message and hex movement\n            if (pace === 'slow') {\n                if (slowPace === 1)\n                    hexesMoved--;\n                if (hexesMoved === 1)\n                    hexText = 'hex';\n                msgContent += '<strong>Slow pace:</strong> Can hide from encounters or approach stealthily.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\n                survival += 5;\n            } else if (pace === 'average') {\n                if (hexesMoved === 1)\n                    hexText = 'hex';\n                msgContent += '<strong>Average pace:</strong> For rivers, upstream and downstream have no effect, and waterfalls occur every 10 to 20 miles (requiring portage of canoes).<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\n            } else if (pace === 'fast') {\n                if (fastPace === 1)\n                    hexesMoved++;\n                if (hexesMoved === 1)\n                    hexText = 'hex';\n                msgContent += '<strong>Fast pace:</strong> -5 to passive Perception.<br/><br/><strong>Party can move:</strong> ' + hexesMoved + ' ' + hexText + '.<br/><br/>';\n                survival -= 5;\n            } else {\n                return;\n            }\n\n            // Survival Check DC for each hex type. If selected token rolls under DC the party is lost!\n            if (((hexType === 'coast' || hexType === 'ruins') && survival < 10) || ((hexType === 'jungle1' || hexType === 'jungle2' || hexType === 'jungle3' || hexType === 'mountains' || hexType === 'rivers' || hexType === 'swamp' || hexType === 'wasteland') && survival < 15)) {\n                msgContent += '<strong>Party is Lost:</strong> Move actual location ' + hexesMoved + ' ' + hexText + ' to the ' + lostDirection + '<br/><br/>';\n                if (locationMarker) {\n                    const locToken = canvas.tokens.get(locationMarker._id);\n                    switch (lostDirection) {\n                        case 'South':\n                            locToken.update({\n                                x: locToken.x,\n                                y: locToken.y + (vertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Southwest':\n                            locToken.update({\n                                x: locToken.x - (diagHorizontal * hexesMoved),\n                                y: locToken.y + (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Southeast':\n                            locToken.update({\n                                x: locToken.x + (diagHorizontal * hexesMoved),\n                                y: locToken.y + (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'North':\n                            locToken.update({\n                                x: locToken.x,\n                                y: locToken.y - (vertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Northwest':\n                            locToken.update({\n                                x: locToken.x - (diagHorizontal * hexesMoved),\n                                y: locToken.y - (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Northeast':\n                            locToken.update({\n                                x: locToken.x + (diagHorizontal * hexesMoved),\n                                y: locToken.y - (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n                if (playerMarker) {\n                    const playerToken = canvas.tokens.get(playerMarker._id);\n                    switch (playerDirection) {\n                        case 'South':\n                            playerToken.update({\n                                x: playerToken.x,\n                                y: playerToken.y + (vertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Southwest':\n                            playerToken.update({\n                                x: playerToken.x - (diagHorizontal * hexesMoved),\n                                y: playerToken.y + (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Southeast':\n                            playerToken.update({\n                                x: playerToken.x + (diagHorizontal * hexesMoved),\n                                y: playerToken.y + (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'North':\n                            playerToken.update({\n                                x: playerToken.x,\n                                y: playerToken.y - (vertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Northwest':\n                            playerToken.update({\n                                x: playerToken.x - (diagHorizontal * hexesMoved),\n                                y: playerToken.y - (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Northeast':\n                            playerToken.update({\n                                x: playerToken.x + (diagHorizontal * hexesMoved),\n                                y: playerToken.y - (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n            } else {\n                if (playerMarker && locationMarker) {\n                    const locToken = canvas.tokens.get(locationMarker._id);\n                    const playerToken = canvas.tokens.get(playerMarker._id);\n\n                    switch (playerDirection) {\n                        case 'South':\n                            playerToken.update({\n                                x: locToken.x,\n                                y: locToken.y + (vertical * hexesMoved)\n                            });\n                            locToken.update({\n                                x: locToken.x,\n                                y: locToken.y + (vertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Southwest':\n                            playerToken.update({\n                                x: locToken.x - (diagHorizontal * hexesMoved),\n                                y: locToken.y + (diagVertical * hexesMoved)\n                            });\n                            locToken.update({\n                                x: locToken.x - (diagHorizontal * hexesMoved),\n                                y: locToken.y + (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Southeast':\n                            playerToken.update({\n                                x: locToken.x + (diagHorizontal * hexesMoved),\n                                y: locToken.y + (diagVertical * hexesMoved)\n                            });\n                            locToken.update({\n                                x: locToken.x + (diagHorizontal * hexesMoved),\n                                y: locToken.y + (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'North':\n                            playerToken.update({\n                                x: locToken.x,\n                                y: locToken.y - (vertical * hexesMoved)\n                            });\n                            locToken.update({\n                                x: locToken.x,\n                                y: locToken.y - (vertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Northwest':\n                            playerToken.update({\n                                x: locToken.x - (diagHorizontal * hexesMoved),\n                                y: locToken.y - (diagVertical * hexesMoved)\n                            });\n                            locToken.update({\n                                x: locToken.x - (diagHorizontal * hexesMoved),\n                                y: locToken.y - (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        case 'Northeast':\n                            playerToken.update({\n                                x: locToken.x + (diagHorizontal * hexesMoved),\n                                y: locToken.y - (diagVertical * hexesMoved)\n                            });\n                            locToken.update({\n                                x: locToken.x + (diagHorizontal * hexesMoved),\n                                y: locToken.y - (diagVertical * hexesMoved)\n                            });\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n            }\n\n            msgContent += '<strong>Morning Encounter:</strong> ';\n\n            if (new Roll(`1d20`).roll().total > 15) {\n                encounter = encounterTable.roll()[1].text;\n                msgContent += encounter;\n                // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\n                if (encounter.indexOf('cache') > -1)\n                    msgContent += cacheTable.roll()[1].text + '<br/><br/>';\n                // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\n                if (encounter.indexOf('DeadExplorers') > -1)\n                    msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\n                msgContent += '<strong>Afternoon Encounter:</strong> ';\n            } else {\n                msgContent += 'None.<br/><br/><strong>Afternoon Encounter:</strong> ';\n            }\n\n            if (new Roll(`1d20`).roll().total > 15) {\n                encounter = encounterTable.roll()[1].text;\n                msgContent += encounter;\n                // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\n                if (encounter.indexOf('cache') > -1)\n                    msgContent += cacheTable.roll()[1].text + '<br/><br/>';\n                // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\n                if (encounter.indexOf('DeadExplorers') > -1)\n                    msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\n                msgContent += '<strong>Evening Encounter:</strong> ';\n            } else {\n                msgContent += 'None.<br/><br/><strong>Evening Encounter:</strong> ';\n            }\n\n            if (new Roll(`1d20`).roll().total > 15) {\n                encounter = encounterTable.roll()[1].text;\n                msgContent += encounter;\n                // CACHE LINES comment out the next 2 lines if you don't want to use a cache table!\n                if (encounter.indexOf('cache') > -1)\n                    msgContent += cacheTable.roll()[1].text + '<br/><br/>';\n                // DEAD EXPLORER LINES comment out the next 2 lines if you don't want to use a dead explorer table!\n                if (encounter.indexOf('DeadExplorers') > -1)\n                    msgContent += deadExplorerTable.roll()[1].text + '<br/><br/>';\n            } else {\n                msgContent += 'None.';\n            }\n\n            // create the message\n            let chatData = {\n                content: msgContent,\n                whisper: game.users.entities.filter(u => u.isGM).map(u => u._id)\n            };\n            ChatMessage.create(chatData, {});\n        }\n    }).render(true);\n}\n\nhexCrawl();","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"cMg47l5epkZ6Q0ae"}
{"name":"Club","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"modules/dcc-core-book/assets/svg/game-icons-net/wood-club.svg","actorIds":[],"_id":"eXewWposyzeivmuQ"}
{"name":"New Macro","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"fxowCIff9Xf8xv3o"}
{"_id":"gQSRbz0iAiIzRQ2Z","name":"1st Vine Horror Tendril","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/commodities/biological/tentacle-thorned-green.webp","actorIds":[]}
{"_id":"hMnPCVT9lmA63Hhc","name":"Set Token bars and nameplate","permission":{"bWT4RleWjkaYiYKA":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"/* This will set every token in scene to always display their\n * token bars and nameplate, and sets the first bar to represent \n * HP and removes the second token bar.\n*/\n\nconst tokens =canvas.tokens.placeables.map(token => {\n   return {\n       _id: token.id,\n       \"bar1.attribute\": \"attributes.hp\",\n       \"bar2.attribute\": \"\",\n       \"displayName\": CONST.TOKEN_DISPLAY_MODES.ALWAYS,\n       \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\n   };\n});\n\ncanvas.scene.updateEmbeddedEntity('Token', tokens)","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"_id":"hitzHpguCe9a8qrF","name":"Specific Token Chatter","permission":{"default":0,"ANHn7Sw4w0uRlS0W":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":300000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"var token = game.scenes.filter(x => x.active)[0].data.tokens.filter(x => x.name == \"Human Thug C\")[0];\r\ngame.npcChatter.tokenChatter(token);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Cast Spell","permission":{"default":0,"yNgzYxeWiwvRCpcF":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":2400000,"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.XB7xBRA7QbFtwHxo"}},"scope":"global","command":"function castSpell(effect) {\n    const tokens = canvas.tokens.controlled;\n    if (tokens.length == 0) {\n        ui.notifications.error(\"Please select a token\");\n        return;\n    }\n    game.user.targets.forEach((i, t) => {\n        canvas.fxmaster.drawSpecialToward(effect, tokens[0], t);\n    })\n}\n\ncastSpell({\n    file: \"modules/fxmaster/specials/jinker/dragonBornBlack-CopperAcid30x5Line.webm\",\n    anchor: {\n        x: -.08,\n        y: 0.5\n    },\n    speed: 0,\n    angle: 0,\n    scale: {\n    x: 1.0,\n    y: 1.0\n}\n});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/sun.svg","actorIds":[],"_id":"jaPGOwkKfnF3Krft"}
{"name":"play-audio","permission":{"FRJk2q4bH9IdLZDf":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"/* This macro requires the advanced macros of Furnace\r\n * This will play audio from a URL\r\n * Takes the URL of the audio file as its first argument\r\n * The second argument, if set to true, will play the audio for every other player too.\r\n * Example: /play-audio \"https://example.com/sound-effects/explosion.mp3\" true\r\n */\r\nconst url = args[0];\r\nconst push = args[1];\r\n\r\nAudioHelper.play({src: [url]}, push);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"lbpOZVsojPBn5bOo"}
{"name":"spear","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/weapons/polearms/spear-flared-worn-grey.webp","actorIds":[],"_id":"ldNM4GM4xPjdFHtO"}
{"name":"Restore token creation","permission":{"FRJk2q4bH9IdLZDf":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"// This will restore your ability (if your player role had it) to drop actors onto a scene to create new tokens.\r\n// This is the complement for the \"Disallow token creation\" macro.\r\n\r\nif (game.disallow_token_creation_id) Hooks.off('preCreateToken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id= 0;","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"lzLhd2ygV25sRgGC"}
{"name":"Battleaxe","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"modules/dcc-core-book/assets/svg/game-icons-net/battle-axe.svg","actorIds":[],"_id":"mSgZpHpDnViYE6X7"}
{"name":"Big Bull Beastman Battleaxe","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"dcc":{"itemMacro":true}},"scope":"global","command":"game.dcc.rollDCCWeaponMacro(\"m1\", {\"backstab\":false});","author":"2O2Bl1dRg3oSt8Kc","img":"icons/weapons/axes/axe-double-black.webp","actorIds":[],"_id":"opeMPYKlo43DItaX"}
{"name":"Canvas Always-on-top","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1500000,"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.tHqyy0sqn6mHlV0m"}},"scope":"global","command":"const video = $(`<video id='pip-video' autoplay='autoplay' onplay='this.requestPictureInPicture()'></video>`)[0];\nvideo.srcObject = $(\"#board\")[0].captureStream();\nconst playVideo = () => {\n   if (video.readyState < 2) setTimeout(playVideo, 0);\n   else video.play();\n};\nplayVideo();","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"pKtnc5eJ1pKxwyye"}
{"name":"Say hello","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","folder":null,"sort":2100000,"flags":{},"scope":"global","command":"Hi {{game.user.name}}, it is now {{macro \"current-time\"}}","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"ptTKyvWtFiXOmGjp"}
{"name":"Full Scene vision","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1800000,"flags":{"furnace":{"runAsGM":false},"core":{"sourceId":"Macro.Rpgok2vhQ4nNton4"}},"scope":"global","command":"// This macro will effectively set the vision area in a scene to the entire gridded area\n// without having to shift any walls or tiles or tokens.\n// It will do this by removing the scene padding by setting it to 0,\n//  then changing the scene dimensions so the overall scene keeps the exact same size\n// It will also move the background image into a tile so it can be positiioned \n// at the same position as it was when the scene had padding\n\nconst width = canvas.scene.data.width;\nconst height = canvas.scene.data.height;\nconst grid = canvas.scene.data.grid;\nconst img = canvas.scene.data.img;\nconst padding = canvas.scene.data.padding;\nconst paddingX = Math.ceil(width * padding / grid) * grid;\nconst paddingY = Math.ceil(height * padding / grid) * grid;\n\nawait canvas.scene.update({img: null, width: width + 2 * paddingX, height: height + 2 * paddingY, padding: 0})\nif (img) {\n  const minZ = canvas.scene.data.tiles.length ? Math.min(...canvas.scene.data.tiles.map(t => t.z)) : 0;\n  await canvas.scene.createEmbeddedEntity('Tile', {width, height, img, scale: 1, rotation: 0, locked: true, hidden: false, x: paddingX, y: paddingY, z: minZ - 1});\n}","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"q99OE5xD7nJL9Suy"}
{"name":"Bulk Change Initiative","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":2600000,"flags":{"core":{"sourceId":"Macro.dZ7vEAaKXJcpnL68"}},"scope":"global","command":"//for the selected tokens, adjust their initiative by X.  Use with selective-select to modify all enemies, friendlies\n\nlet applyChanges = false;\n\nnew Dialog({\n    title: `Bulk change initiative`,\n    content: `\n      <form>\n        <div class=\"form-group\">\n          <label>Initiative adjustment:</label>\n          <input id=\"init-adjust\" name=\"init-adjust\" type=\"number\" step=\"1\" value=\"0\"/>\n        </div>\n      </form>\n      `,\n    buttons: {\n      yes: {\n        icon: \"<i class='fas fa-check'></i>\",\n        label: `Apply Changes`,\n        callback: () => applyChanges = true\n      },\n      no: {\n        icon: \"<i class='fas fa-times'></i>\",\n        label: `Cancel Changes`\n      },\n    },\n    default: \"yes\",\n    close: html => {\n      if (applyChanges) {\n          let initadjust = parseInt(html.find('[name=\"init-adjust\"]')[0].value || \"0\");\n        for ( let token of canvas.tokens.controlled ) {\n            for(let count=0;count<game.combat.combatants.length;count++){\n                if(token.data._id==game.combat.combatants[count].tokenId){\n                    game.combat.setInitiative(game.combat.combatants[count]._id,game.combat.combatants[count].initiative+initadjust);\n                    break;\n                }\n            }\n        }\n      }\n    }\n  }).render(true);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"qCp4k2E6qjlyzHdh"}
{"name":"Format All Scene Notes","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1000000,"flags":{"core":{"sourceId":"Macro.yBeuLYd6wNuX6JHQ"}},"scope":"global","command":"let newNoteData = {};\n\nfor (let c of canvas.notes.children[0].children) {\n    //newNoteData = duplicate(c.data);\n\n    /*  \n        Define new note properties\n        double right-click a map pin for a list of valid fonts, icons, etc. \n        Remove the // in front of any line below to enable that change.    \n    */\n\n    //newNoteData.fontFamily = \"Signika\";\n    //newNoteData.fontSize = 8;\n    \n    /* \n        replace the name of the icon, for example, the anchor would be \"icons/svg/anchor.svg\" \n    */ \n    //newNoteData.icon = \"icons/svg/book.svg\";\n    //newNoteData.iconSize = 40;\n    //newNoteData.iconTint = \"\";\n    //newNoteData.text = \"test\";\n    \n    /*  \n        textAnchor controls the location of the text in relation to the icon. 0-4 are valid choices.\n        1 is the default, below. 0 hovers over the icon itself. 2 is above, 3 is left, 4 is right.  \n    */\n    //newNoteData.textAnchor = 1;\n    //newNoteData.textColor = \"#000000\";\n    //newNoteData.x = 2250;\n    //newNoteData.y = 2050;\n\n    c.update(newNoteData);\n\n}\n\nasync () => {\n    await canvas.draw()\n}","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"qjT015DdQaeGIwyB"}
{"name":"teleport","permission":{"FRJk2q4bH9IdLZDf":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"// This macro only serves as an example. For a proper teleportation macro, check out the Dynamic Effects module.\r\n//\r\n// This macro requires the advanced macros of Furnace\r\n// This macro depends on /move-token\r\n// Takes X and Y as arguments\r\n\r\nconst macro = game.macros.getName(\"move-token\");\r\nif (!macro) {\r\n  ui.notifications.error(\"This macro depends on the 'move-token' macro, which could not be found.\");\r\n  return;\r\n}\r\nmacro.execute(args[0], args[1], true);\r\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"s8YqeA1GTI6ozH83"}
{"_id":"sF3c2u6tN9PFjzXR","name":"what","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"script","sort":100001,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"const { who, what } = args;\nreturn `${who} wants to know \"${what}\"`","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"New Macro","permission":{"default":0,"8fzW5GN0Z9NAHEi9":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"8fzW5GN0Z9NAHEi9","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"t1c2qF39ThiuIJ6l"}
{"name":"New Macro","permission":{"default":0,"2O2Bl1dRg3oSt8Kc":3},"type":"chat","sort":100001,"flags":{},"scope":"global","command":"","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"u2O9UWNenJugvilH"}
{"name":"Measure Token Distances","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1900000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"// This macro will measure the distance between the selected tokens\r\n// and every targetted tokens within a scene.\r\n// It will then output the measured distances to the chat\r\n// If called with an argument, determines who to whisper the message to,\r\n// otherwise sends it as a public message\r\n\r\nlet message = \"\"\r\nfor (let token of canvas.tokens.controlled) {\r\n   let ruler = canvas.controls.ruler;\r\n   for (let target of game.user.targets) {\r\n       ruler.clear()\r\n       ruler.waypoints.push(token.center)\r\n       ruler.labels.addChild(new PIXI.Text(\"\"));\r\n       ruler.measure(target.center);\r\n       let distance = ruler.labels.children[0].text;\r\n       message += `From '${token.name}' to '${target.name}' : ${distance}<br/>`\r\n       ruler.clear();\r\n   }\r\n}\r\nif (message) {\r\n   const whisper = args[0] ? ChatMessage.getWhisperIDs(args[0]) : undefined;\r\n   ChatMessage.create({content: message, whisper});\r\n}","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"u4gW761jdVIMPZ7P"}
{"_id":"uhHn0fQmM1u1KXLZ","name":"Global Chatter","permission":{"default":0,"ANHn7Sw4w0uRlS0W":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":200000,"flags":{},"scope":"global","command":"game.npcChatter.globalChatter()","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"Token HP","permission":{"default":0,"y5gmtwxmW3A5ZuOP":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1300000,"flags":{},"scope":"global","command":"/**\n * Roll/Reroll selected token HP\n * Author: Tielc#7191\n */\n\nconst tokens = canvas.tokens.controlled;\nlet choice = 0;\n\nif (tokens.length > 0){\n\ttokens.forEach(rollHP);\n} else {\n\tprintMessage(\"No Tokens were selected\");\n}\n\nfunction rollHP(token, index){\n\tlet actor = token.actor;\n\tlet formula = actor.data.data.attributes.hp.formula;\n\t\t\n\tif (actor.data.type != \"npc\" || !formula) return;\n\t\n\tlet hp = new Roll(formula).roll().total;\n\t\n\tactor.data.data.attributes.hp.value = hp;\n\tactor.data.data.attributes.hp.max = hp;\n\t\n\tprintMessage('<h2>' + actor.data.name + '</h2><strong>HP:</strong> ' + actor.data.data.attributes.hp.value + '/' + actor.data.data.attributes.hp.max + '<span style=\"float:right\"><em>(' + token.data._id + ')</em></span>');\n}\n\nfunction printMessage(message){\n\tlet chatData = {\n\t\tuser : game.user._id,\n\t\tcontent : message,\n\t\tblind: true,\n\t\twhisper : game.users.entities.filter(u => u.isGM).map(u => u._id)\n\t};\n\n\tChatMessage.create(chatData,{});\t\n}\n","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"uw7Z1Ag7nDmkNH3e"}
{"name":"Disallow token creation","permission":{"FRJk2q4bH9IdLZDf":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":100001,"flags":{},"scope":"global","command":"// After running this macro, it will be impossible to drop any new tokens onto the scene, regardless of user permission\r\n// Running the 'Restore token creation' macro will restore the normal behavior.\r\n\r\nif (game.disallow_token_creation_id)\r\n   Hooks.off('preCreatetoken', game.disallow_token_creation_id);\r\ngame.disallow_token_creation_id = Hooks.on(\"preCreateToken\", () => false);","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"vKO8iX6mZKtqOnRK"}
{"_id":"w4aIdMl0aB7hAkeL","name":"Turn Off Timed Chatter","permission":{"default":0,"DYIT8hcJthmTtZvR":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":600000,"flags":{"furnace":{"runAsGM":false}},"scope":"global","command":"game.npcChatter.turnOffGlobalTimerChatter()","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[]}
{"name":"animate-pan","permission":{"default":0,"PEJBB2AYKoE5ZuxD":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":1400000,"flags":{},"scope":"global","command":"/* Pan the camera to the X, Y and scale positions.\r\n * See the 'pan-camera' macro for more details.\r\n * The first argument is the duration in milliseconds for the panning animation\r\n * The second argument is X, third argument is Y and fourth argument is the zoom level\r\n * Example: /animate-pan 500 1500 1500 0.5\r\n */\r\n\r\ncanvas.animatePan({duration: args[0], x: args[1], y: args[2], scale: args[3]})","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"yNeiD4Mjdx2hBaU3"}
{"name":"journal-dialog","permission":{"8pIGCEozfXNtPyHL":3,"2O2Bl1dRg3oSt8Kc":3},"type":"script","folder":null,"sort":400000,"flags":{},"scope":"global","command":"// This macro requires the advanced macros of Furnace\r\n// This will display the contents of a journal as a dialog\r\n// Takes one argument, the journal name\r\n// Example: /journal-dialog \"Welcome to my world\"\r\n\r\nconst journal = game.journal.entities.find(j => j.name === args[0])\r\nif (!journal) return;\r\nnew Dialog({content: journal.data.content,\r\n            buttons: {ok: {label: args[1] || \"ok\"}}}).render(true)","author":"2O2Bl1dRg3oSt8Kc","img":"icons/svg/dice-target.svg","actorIds":[],"_id":"yfp6QfTXVyWmAmdz"}
{"name":"New Macro","type":"chat","author":"Xa2IlBnAQCkjzuYW","img":"icons/svg/dice-target.svg","scope":"global","command":"","folder":null,"sort":0,"permission":{"default":0,"Xa2IlBnAQCkjzuYW":3},"flags":{},"_id":"MPfuM1FG5q5xqAnn"}
{"$$deleted":true,"_id":"MPfuM1FG5q5xqAnn"}
